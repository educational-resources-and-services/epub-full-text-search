#!/usr/bin/env node

import 'colors';
import cproc from 'child_process';
import constants from "../lib/Constants";
import path from 'path';


const exec = cproc.exec;  
console.log("exec path: " + __dirname);

var node;
var forever = './../../node_modules/.bin/forever ';
forever = path.normalize(forever);

switch (process.argv[2]) {


    case 'writeToIndex':
        cproc.fork(__dirname + '/search-engine-CLI', process.argv);
        break;
    case 'status':
        node = exec(forever + 'list');
        break;

    case 'start':
        process.stdout.write('\nStarting Epub search service\n'.bold);
        const logging = '-o ' + constants.DATA_FOLDER + '/out.log -e ' + constants.DATA_FOLDER + '/err.log ';
        node = exec(forever + logging + __dirname + '/../lib/WebService.js', {
            env: process.env
        });
        break;

    case 'stop':
        node = exec(forever + 'stopall');
        break;

    case 'restart':
        node = exec(forever + 'restartall');
        break;
    
    case 'log':

        process.stdout.write('\nFind Epub search log-files here ' +  constants.DATA_FOLDER.bold + '\n\n');
        // process.stdout.write('\nType '.red + 'Ctrl-C '.bold + 'to exit'.red);
        // process.stdout.write('\n\n'.reset);
        // //cproc.spawn('tail', ['-F', './logs/output.log'], {
        // //    cwd: __dirname,
        // //    stdio: 'inherit'
        // //});
        break;

    case 'upgrade':
        // async.series([
        //     (next) => {
        //         process.stdout.write('1. '.bold + 'Bringing base dependencies up to date... '.yellow);
        //         require('child_process').execFile('/usr/bin/env', ['npm', 'i'], next);
        //     }
        // ], (err) => {
        //     if (err) {
        //         process.stdout.write('\nError'.red + ': ' + err.message + '\n');
        //     } else {
        //         const message = 'Epub search service Upgrade Complete!';
        //
        //         const columns = process.stdout.columns;
        //         const spaces = columns ? new Array(Math.floor(columns / 2) - (message.length / 2) + 1).join(' ') : "  ";
        //
        //         process.stdout.write('OK\n'.green);
        //         process.stdout.write('\n' + spaces + message.green.bold + '\n\n'.reset);
        //     }
        // });
        break;

    default:
        process.stdout.write('\n\nWelcome to Epub search service\n\n'.bold);
        process.stdout.write('Usage: epub-search [action] [options]\n\n');
        process.stdout.write('Actions:\n');
        process.stdout.write('\t' + 'start'.yellow + '\t\tStart the service\n');
        process.stdout.write('\t' + 'stop'.yellow + '\t\tStop the service\n');
        process.stdout.write('\t' + 'status'.yellow + '\t\tGet the state of the service\n');
        process.stdout.write('\t' + 'writeToIndex'.yellow + '\tEpub-book(s) which should be written to index.' +
            '(Hint: the epub content have to be unzipped)\n'.red + '\n\n');
        process.stdout.write('Options:\n');
        process.stdout.write('\t' + '-p'.yellow + '\tPath to epub folder which contains epub-book(s).\n\n');
        break;
}


if (node) {
    node.stdout.on('data', (data) => {
        console.log(`${data}`);
    });

    node.stderr.on('data', (data) => {
        console.log(`${data}`.red);
    });

    node.on('close', (code) => {
        console.log(`child process exited with code ${code}`);
    });
}
#!/usr/bin/env node

import 'colors';
import cproc from 'child_process';
import constants from "../lib/Constants";
import fs from 'fs';


const exec = cproc.exec;
const OUT = 'out.log';
const ERR = 'err.log';
//console.log(__dirname);

var node;

const forever = "./../../node_modules/.bin/forever ";

switch (process.argv[2]) {


    case 'writeToIndex':
        cproc.fork(__dirname + '/search-engine-CLI', process.argv);
        break;

    case 'start':
        process.stdout.write('\nStarting EPUB search service\n'.bold);
        const logging = '-o ' + constants.DATA_FOLDER + '/' + OUT + ' -e ' + constants.DATA_FOLDER + '/' + ERR;
      //  console.log(forever +  logging + ' --minUptime 5000 --spinSleepTime 2000 ' + ' start ' + __dirname + '/../lib/WebService.js');
        node = exec(forever +  logging + ' --minUptime 5000 --spinSleepTime 2000 ' + ' start ' + __dirname + '/../lib/WebService.js', {
            env: process.env
        });
        break;

    case 'stop':
        node = exec(forever + 'stopall');
        break;

    case 'restart':
        node = exec(forever + 'restartall');
        break;
    
    case 'logs':

        process.stdout.write('\nFind EPUB search log-files here ' +  constants.DATA_FOLDER.bold + '\n\n');
        fs.readFile(constants.DATA_FOLDER + '/' + OUT, 'utf8', function(err, data) {
            if (err) throw err;
            console.log(data);
        });
        fs.readFile(constants.DATA_FOLDER + '/' + ERR, 'utf8', function(err, data) {
            if (err) throw err;
            console.log(data);
        });
        break;


    default:
        process.stdout.write('\n\nWelcome to EPUB search service\n\n'.bold);
        process.stdout.write('Usage: epub-search [action] [options]\n\n');
        process.stdout.write('Actions:\n');
        process.stdout.write('\t' + 'start'.yellow + '\t\tStart the service\n');
        process.stdout.write('\t' + 'stop'.yellow + '\t\tStop the service\n');
        process.stdout.write('\t' + 'status'.yellow + '\t\tGet the state of the service\n');
        process.stdout.write('\t' + 'writeToIndex'.yellow + '\tEPUB-book(s) which should be written to index.' +
            '(Hint: the EPUB content have to be unzipped)\n'.red + '\n\n');
        process.stdout.write('Options:\n');
        process.stdout.write('\t' + '-p'.yellow + '\tPath to EPUB folder which contains EPUB-book(s).\n\n');
        break;
}


if (node) {
    node.stdout.on('data', data => {
        console.log(`${data}`);
    });

    node.stderr.on('data', data => {
        console.log(`${data}`.red);
    });

    node.on('close', code => {
        console.log(`child process exited with code ${code}`);
    });
}